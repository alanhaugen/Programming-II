[AGameModeBase]<-
[ASurvivalGameMode
|
# attributes
+ EnemyQuantity : int
+ CurrentWave : int
+ EnemyQuantityForCurrentWave : int
+ Spawners : TArray<AEnemySpawner*>
\# bWillAutomaticallyGoToNextWave : bool
|
# operations
+ CheckIfLastEnemy() : void
\# SpawnWave()
]<-
[AAdventureGameMode
|
# attributes
- SpecialItemsQuantity : int
- AmountOfSpecialItemsToOpenGate : int
|
# operations
+ TriggerWave(Wave : int) : void
+ PickupSpecialItem() : void
]

[AActor]<-
[ABullet
|
# attributes
+ Character : AHarker*
+ BulletMesh : UStaticMeshComponent*
+ BulletDamage : float
+ BulletType : EAmmoTypes
+ MovementSpeed : float
|
# operations
+ Tick (DeltaTime : float) : virtual void override
\# BeginPlay() : virtual void override
\# OnBoxOverlap (
in OverlappedComponent : UPrimitiveComponent*,
in OtherActor : AActor*,
in OtherComp : UPrimitiveComponent*,
in OtherBodyIndex : int32,
in bFromSweep : bool,
in SweepResult : const FHitResult&) : virtual void
]

[AActor]<-
[ACheckPoint
|
+ AmmunitionNormal : float
+ AmmunitionFlame : float
+ AmmunitionHoly : float
+ Wave : int
- Player : AHarker*
|
+ Tick(DeltaTime : float) : override virtual void
+ Load() : void
\# BeginPlay() : override virtual void
]

[AActor]<-
[AItem
|
+ RunningTime : float
+ Amplitude : float
+ TimeConstant : float
+ RotationSpeed : float
+ ItemAmount : float
+ ItemType : int
- Player : AHarker*
\# CollisionMesh : UBoxComponent*
|
+ Tick (DeltaTime : float) : override virtual void
\# BeginPlay() : override virtual void
\# OnBoxOverlap (
in OverlappedComponent : UPrimitiveComponent*,
in OtherActor : AActor*,
in OtherComp : UPrimitiveComponent*,
in OtherBodyIndex : int32,
in bFromSweep : bool,
in SweepResult : const FHitResult&) : virtual void
]

[ACharacter]<-
[AEnemy
|
+ IsAttacking : bool 
+ IsDead : bool
+ AttackDamage : float
+ Attributes : UAttributeComponent*
+ HealthBarWidget : UHealthBarComponent*
+ ChanceOfDroppingItem : int
+ NormalAmmoPickup : TSubclassOf<AItem>
+ FireAmmoPickup : TSubclassOf<AItem>
+ HolyAmmoPickup : TSubclassOf<AItem>
+ HealthPickup : TSubclassOf<AItem>
\# CurrentWaypointIndex : int32
\# Waypoints : TArray< AActor*>
- AttackMontage : UAnimMontage*
- DeathMontage : UAnimMontage*
- Player : AHarker*
- SurvivalMode : ASurvivalGameMode*
|
+ Tick (DeltaTime : float) : override void
+ SetupPlayerInputComponent (
PlayerInputComponent : UInputComponent*) : override virtual void
+ TakeDamage (
in DamageAmount : float,
in DamageEvent : struct FDamageEvent const&,
in EventInstigator : class AController*,
in DamageCauser: AActor*) : override virtual float
+ void 	UpdateWalkSpeed (NewWalkSpeed : float) const 
+ void 	CancelWaypoints() 
+ void 	SpawnRandomPickup()
\# BeginPlay() : override virtual void
\# DeathEnd() : void
\# AttackEnd() : void
\# UpdateUI() : void
\# UpdateDeathLogic() : void
\# MoveToNextWaypoint() : void
\# Combat() : void
\# RemoveAIComponent() : const void
]

[AEnemy]<-
[AFlyingEnemy
|
+ EnemySpeed : float
|
+ Tick (DeltaTime : float) : override virtual void
+ BeginPlay() : override virtual void
]

[UAttributeComponent
|
+ Health : float
+ MaxHealth : float
|
+ TickComponent(
in DeltaTime : float,
in TickType : ELevelTick,
in ThisTickFunction : FActorComponentTickFunction*) : override virtual void
\# BeginPlay() : override void
]

[AEnemy]o-[UHealthBarComponent]
[UHealthBar]-o[UHealthBarComponent]
[AEnemy]o-[UAttributeComponent]

#[AHarker]-o[AInteractable]
#[AHarker]-o[ABullet]
#[AHarker]-o[UHarkerAnimInstance]

[AActor]<-
[AEnemySpawner
|
+ RunningTime : float
+ Waves : TArray<int>
+ EnemyClass : TSubclassOf<class AActor>
+ SpawnRadius : float
+ SpawnTime : float
|
+ Tick (DeltaTime : float) : override virtual void
+ Spawn (Wave : int) : void
\# BeginPlay () : override virtual void
]

[ACharacter]<-
[AHarker
|
+ MaxHealth : float
+ Health : float
+ AmmunitionNormal : float
+ AmmunitionFlame : float
+ AmmunitionHoly : float
+ isZoomingIn : bool
+ ZoomFactor : float
+ IsInteracting : bool
+ CurrentInteractable : AInteractable*
+ bCanInteract : bool
+ HarkerContext : UInputMappingContext*
+ MoveAction : UInputAction*
+ JumpAction : UInputAction*
+ LookAction : UInputAction*
+ class FireAction : UInputAction*
+ AimAction : UInputAction*
+ ScopeAction : UInputAction*
+ InteractionAction : UInputAction*
+ CycleAmmunitionAction : UInputAction*
+ PauseAction : UInputAction*
+ BulletToSpawnNormal : TSubclassOf<ABullet>
+ BulletToSpawnFire : TSubclassOf<ABullet>
+ BulletToSpawnHoly : TSubclassOf<ABullet>
+ CurrentCheckPoint : ACheckPoint*
+ CheckPoints : TArray< ACheckPoint*>
+ TraceChannelProperty : TEnumAsByte<ECollisionChannel>
+ AttackMontage : UAnimMontage*
+ DeathMontage : UAnimMontage*
- IsFiring : bool
- FireDelayTime : float
- CharacterState : ECharacterState
- ActionState : EActionState
- SelectedAmmo : EAmmoTypes
- SpringArm : USpringArmComponent* 
- Camera : UCameraComponent*
- FPSCamera : UCameraComponent*
- Lantern : UStaticMeshComponent*
- LanternSpotLight : UPointLightComponent*
- Umbrella : UStaticMeshComponent*
- CollisionBoxUmbrella : UBoxComponent*
- Crossbow : USkeletalMeshComponent*
- UmbrellaFPSMode : UStaticMeshComponent*
- CrossbowFPSMode : USkeletalMeshComponent*
|
+ EquipWeapon() : void
+ Tick (float DeltaTime) : override virtual void
+ SetupPlayerInputComponent (PlayerInputComponent : UInputComponent*) : override virtual void
+ Fire() : void
+ AimStart (Value : const FInputActionValue&) : void
+ AimEnd (Value : const FInputActionValue&) : void
+ Scope() : void
+ Interaction() : void
+ CycleAmmunition() : void
+ PauseGame() : void
+ LoadCheckPoint() : bool
+ GetCharacterState () : const FORCEINLINE ECharacterState
+ GetCharacterActionState() : const FORCEINLINE EActionState
+ ResetStates() : FORCEINLINE void
- FireDelay() : void
- Move(Value : const FInputActionValue&) : void
- LookAround(Value : const FInputActionValue&) : void
- UpdateItemVisibility() : void
- SetItemVisibilityEquipped() : void
- SetItemVisibilityUnequipped() : void
- UpdateCameraBehaviour(isTurningWithCamera : bool) : void
\# BeginPlay() : override virtual void
\# MeleeAttack() : bool
\# SpendAmmo() : bool
\# SpawnBullet() : void
\# CanFire() : const bool
\# MeleeAttackEnd() : UFUNCTION (BlueprintCallable) void
]

[UAnimInstance]<-
[UEnemyAnimInstance
|
+ EnemyCharacter : UCharacterMovementComponent*
+ EnemyCharacterMovement : UCharacterMovementComponent*
+ GroundSpeed : float
+ IsFalling : bool
+ IsDead : bool
|
+ NativeInitializeAnimation() : override virtual void
+ NativeUpdateAnimation (DeltaTime : float) : override virtual void
]

[UAnimInstance]<-
[UHarkerAnimInstance
|
+ HarkerCharacter : AHarker*
+ HarkerCharacterMovement : UCharacterMovementComponent*
+ GroundSpeed : float
+ IsFalling : bool
+ IsStraphing : bool
+ IsMovingForward : bool
+ IsMovingRight : bool
+ CharacterState : ECharacterState
|
+ NativeInitializeAnimation() : override virtual void
+ NativeUpdateAnimation (DeltaTime : float) : override virtual void
]

[UUserWidget]<-
[UHealthBar
|
+ HealthBar : UProgressBar*
|
]

[UWidgetComponent]<-
[UHealthBarComponent
|
- HealthBarWidget : UPROPERTY() UHealthBar*
|
+ SetHealthPercent (Percent : float) : void
]

[AActor]<-
[AInteractable
|
# attributes
\# UStaticMeshComponent : Mesh*
\# UBoxComponent : CollisionBox*
\# PreInteractionMessage : FText
\# InteractionMessage : FText
|
# operations
+ OnOverlap(
            in mOverlappedComponent : UPrimitiveComponent*,
            in mOtherActor : AActor*,
            in mOtherComp : UPrimitiveComponent*,
            in mOtherBodyIndex : int32,
            in mbFromSweep : bool,
            in mconst SweepResult : FHitResult&) : void
+ OnEndOverlap(
            in mOverlappedComponent : UPrimitiveComponent*,
            in mOtherActor : AActor*,
            in mOtherComp : UPrimitiveComponent*,
            in mOtherBodyIndex : int32) : void
\# BeginPlay () override
\# Tick (DeltaTime : float) override
]<-
[ALadder
|
# attributes
+ CollisionBoxTop : UBoxComponent*
|
# operations
\# BeginPlay () override
]